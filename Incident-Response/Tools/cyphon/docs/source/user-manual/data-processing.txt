.. _data-processing:

###############
Data Processing
###############

Once Cyphon receives data, the next step is to process it. Data passes through three main handlers, which coordinate the activity of more specialized handlers:

1. **Chute**: directs the data through a Sieve and then on to a Munger
2. **Munger**: remodels the data with a Condenser and passes it on to a Distillery
3. **Distillery**: enhances the data and sends it to a Collection for storage

.. figure:: ../_static/images/figures/data-processing.png
    :align: center
    :alt: Processing data
    :target: ../_static/images/figures/data-processing.png
    
    **The three main stages of data processing in Cyphon.**

Data enters the system in a raw form and is saved in a refined form (although the raw data may also be retained).

While the data is still in a raw form, it requires specialized handling according to whether it's a log message, an email message, or JSON data. For this reason, the first two stages of data processing use specific handlers for each type of data:

=========  ============  =============  =============
Handler    Log Message   Email Message  JSON Data
=========  ============  =============  =============
Chute      LogChute      MailChute      DataChute
Sieve      LogSieve      MailSieve      DataSieve
Munger     LogMunger     MailMunger     DataMunger
Condenser  LogCondenser  MailCondenser  DataCondenser
=========  ============  =============  =============

Once data passes into the third stage of processing — when it is passed to a Distillery — it is in a more standard form that can be handled in a uniform way.

******************
From the Bottom Up
******************

Cyphon's admin interface allows you to build configurations either from the bottom up (from simple to complex) or from the top down (from complex to simple). Here we explain how to set up a data processing pipeline using a bottom-up approach.

    * :ref:`Step 1: Distillery<distilleries-overview>`
    * :ref:`Step 2: Condenser<condensers-overview>`
    * :ref:`Step 3: Sieve<sieves-overview>`
    * :ref:`Step 4: Munger<mungers-overview>`
    * :ref:`Step 5: Chute<chutes-overview>`


.. _distilleries-overview:

Step 1: Configure a Distillery
==============================

.. image:: ../_static/images/icons/distillery.png
    :width: 100px
    :align: left
    :alt: Distillery

A Distillery coordinates several aspects of data processing: it specifies the data model for a set of documents, the location where they are stored, and some general info about them. A Distillery can also enhance the data it handles and construct  teasers for the documents it stores.

To create a Distillery, click on the "Distilling Data" panel on Cyphon's main admin page. Then click on the plus sign by "Distilleries" to go to the page for adding a new Distillery.

.. image:: ../_static/images/admin/distilling-data-admin.png

.. figure:: ../_static/images/admin/distillery-admin.png
    :align: center
    :alt: Distillery admin page

    **The admin page for creating a Distillery.**

Specify the Collection that will store that data and the Container that describes the data in its refined form. See :ref:`data-storage` for details.

Leave "Is shell" unchecked. "Shells" are used to make Cyphon aware of data that it did not have a hand in storing. This lets Cyphon search through data that was stored by another application (for example, `Logstash`_).

Select any Categories that you want to use to tag the Collection. These Categories will determine which Watchdogs will inspect the data. See the section on :ref:`Watchdogs<watchdogs-overview>` for details.


.. _condensers-overview:

Step 2: Configure a Condenser
=============================

.. image:: ../_static/images/icons/condenser.png
    :width: 100px
    :align: left
    :alt: Condenser

A Condenser transforms data from one data model into another. A Condenser is composed of one or more Fittings. Each Fitting maps a field from the raw data to a target field in the new data model.

Because data structures can include nesting, a Fitting can point to either a Parser or another Condenser. A Fitting that points to a Parser maps a single field to a target field. A Fitting that points to a Condenser maps a set of nested fields to a target field.

.. figure:: ../_static/images/figures/condenser-diagram.png
    :width: 500px
    :align: center
    :alt: Condenser structure

    **Condensers can be used to create nested data structures.**  

In the diagram above, Parsers are used to map values to the target fields "title" and "link." Another Condenser is used to nest a set of target fields under the parent target field "user."

To add a Condenser, click on the "Condensing Data" panel on Cyphon's main admin page. Then click on the type of data you want to parse.

.. image:: ../_static/images/admin/condensing-data-admin.png


.. _mungers-overview:

Step 3: Configure a Munger
==========================

.. image:: ../_static/images/icons/munger.png
    :width: 100px
    :align: left
    :alt: Munger

A Munger uses a Condenser to parse data and a Distillery to enrich and save the data. Mungers create loose couplings between Condensers and Distilleries. Essentially, they represent a many-to-many relationship between Condensers and Distilleries. This allows you to condense different kinds of data for the same Distillery, or condense the same kind of data for different Distilleries.

A Munger is easy to configure — just assign it a Condenser and a Distillery. The Condenser should use the same Bottle that's used for the Distillery's Container. That ensures that the data is condensed into the form expected by the Distillery. (See the section on :ref:`containers-overview` for more information.)

To add a Munger, click on the "Sifting Data" panel on Cyphon's main admin page. Then click on the type of data you want to handle. You'll see "mungers" listed as an option for the chosen data type.

.. image:: ../_static/images/admin/sifting-data-admin.png


.. _sieves-overview:

Step 4: Configure a Sieve
=========================

.. image:: ../_static/images/icons/sieve.png
    :width: 100px
    :align: left
    :alt: Sieve

Sieves test whether data meets a certain set of criteria. When used by a Chute, they determine whether data should proceed to the Chute's Munger for processing. 

Sieves represent rules sets. They are composed of one of more SieveNodes. A SieveNode can point to either a Rule or another Sieve. This permits the construction of complex, nested rulesets.


.. figure:: ../_static/images/figures/sieve-diagram.png
    :width: 450px
    :align: center
    :alt: Sieve structure

    **Sieves can be used to create complex rulesets.**  

In the diagram above, a Sieve combines two Rules and a ruleset defined by another Sieve.

To add a Sieve, click on the "Sifting Data" panel on Cyphon's main admin page. Then click on the type of data you want to handle. You'll see "sieves" listed as an option for the chosen data type.


.. _chutes-overview:

Step 5: Configure a Chute
=========================

.. image:: ../_static/images/icons/chute.png
    :width: 90px
    :align: left
    :alt: Chute

A Chute uses a Sieve to vet the data and a Munger to process the data. Chutes create loose couplings between Sieves and Mungers. Essentially, they represent a many-to-many relationship between Sieves and Mungers. This allows you to process different kinds of data with the same Munger, or process the same kind of data with different Mungers.

A Chute is easy to configure — just assign it a Sieve and a Munger.

To add a Chute, click on the "Sifting Data" panel on Cyphon's main admin page. Then click on the type of data you want to handle. You'll see "chutes" listed as an option for the chosen data type.
