.. _glossary:

########
Glossary
########

    **Action**
        Sends a REST API request to a Destination in response to an Alert.

    **Account**
        An account on a social media platform associated with a Followee.

    **Alarm**
        Defines conditions for generating an Alert. Can take the form of a Watchdog or a Monitor.

    **Alert**
        An object generated by an Alarm regarding a document that was saved by a Distillery.

    **Analysis**
        An analysis associated with an Alert.

    **AppUser**
        A modified version of Django's default User.

    **Article**
        A reference document that can be associated with one or more Tags.

    **Bottle**
        A custom data model.

    **Category**
        Used to assign particular Watchdogs to particular Distilleries. Can also be used to filter Alerts.

    **Chute**
        Sifts, parses, and saves incoming data to an appropriate Collection.

    **CodeBook**
        A collection of one or more CodeNames used to redact document teasers.

    **CodeName**
        A replacement string for redacting strings matching a RealName.

    **Collection**
        A set of documents in a Warehouse, defined by an Elasticsearch document type or MongoDB collection.

    **CollectionQuery**
        A query for searching documents in one or more Collections.

    **Company**
        Associates groups of AppUsers with particular Distilleries.

    **Condenser**
        Allows data to be stored in a Bottle. Composed of Fittings that map BottleFields to Parsers.

    **Container**
        Stores data in a custom format using a Bottle and a Label. Can be sampled with a Taste.

    **Context**
        Identifies related data based on a relative time frame and/or field values from a reference document.

    **Courier**
        Helps to execute an Action. Carries a Passport.

    **DataChute**
        Sifts, parses, and saves structured data to an appropriate Collection.

    **DataCondenser**
        Allows structured data to be stored in a Bottle. Composed of DataFittings that map BottleFields to DataParsers.

    **DataField**
        Defines a field in a data model.

    **DataFitting**
        Maps a BottleField to a DataParser. Used to construct a DataCondenser.

    **DataMunger**
        Coordinates parsing and saving of structured data using a DataCondenser and a Distillery.

    **DataParser**
        Extracts a value from structured data.

    **DataRule**
        A logical test used to categorize structured data.

    **DataSieve**
        A ruleset composed of one or more DataSieveNodes. Used to test whether data meets a certain set of criteria.

    **DataSieveNode**
        A component of a DataSieve, consisting of a DataRule or another DataSieve.

    **DataTagger**
        Tags an Alert based on the value of a Container field.

    **Destination**
        A third-party platform associated with Actions.

    **Dispatch**
        Saves an API response from an Action, as well as a Stamp of the API call.

    **Distillery**
        Stores and retrieves data within Collections and constructs document Teasers.

    **Emissary**
        Carries a Passport for accessing Endpoints. Can take the form of a Courier or a Plumber.

    **Endpoint**
        Respresents a REST API endpoint of a Platform. Can take the form of an Action or a Pipe.

    **Engine**
        Provides an interface with a data store, such as Elasticsearch or MongoDB.

    **Filter**
        A search parameter, such as a Followee, Location, or SearchTerm.

    **Fitting**
        Maps a BottleField to a Parser. Used to construct a Condenser.

    **Followee**
        A user with one or more Accounts in a Reservoir.

    **Funnel**
        Channels data from a Pipe through a DataCondenser and into a Bottle.

    **Inspection**
        Performs simple tests on data using DataSieves.

    **Invoice**
        Record of an REST API request sent through a Pipe.

    **Label**
        Enhances data with the results of an Inspection or Procedure.

    **Location**
        Geolocation used to create a Filter.

    **LogChute**
        Sifts, parses, and saves structured data to an appropriate Collection.

    **LogCondenser**
        Allows a log message to be stored in a Bottle. Composed of LogFittings that map BottleFields to LogParsers.

    **LogFitting**
        Maps a BottleField to a LogParser. Used to construct a LogCondenser.

    **LogMunger**
        Coordinates parsing and saving of a log message using a LogCondenser and a Distillery.

    **LogParser**
        Extracts a value from a log message.

    **LogRule**
        A logical test used to categorize a log message.

    **LogSieve**
        A ruleset composed of one or more LogSieveNodes. Used to test whether a log message meets a certain set of criteria.

    **LogSieveNode**
        A component of a LogSieve, consisting of a LogRule or another LogSieve.

    **MailChute**
        Sifts, parses, and saves structured data to an appropriate Collection.

    **MailCondenser**
        Allows an email message to be stored in a Bottle. Composed of MailFittings that map BottleFields to MailParsers.

    **MailFitting**
        Maps a BottleField to a MailParser. Used to construct a MailCondenser.

    **MailMunger**
        Coordinates parsing and saving of data using a MailCondenser and a Distillery.

    **MailParser**
        Extracts a value from an email message.

    **MailRule**
        A logical test used to categorize an email message.

    **MailSieve**
        A ruleset composed of one or more MailSieveNodes. Used to test whether an email message meets a certain set of criteria.

    **MailSieveNode**
        A component of a MailSieve, consisting of a MailRule or another MailSieve.

    **Monitor**
        An Alarm that keeps track of data flow to one or more Distilleries. Can generate an Alert if data is not being saved at an expected rate.

    **Munger**
        Coordinates parsing and saving of data using a Condenser and a Distillery.

    **Muzzle**
        Throttles duplicate Alerts generated by a particular Watchdog.

    **Parser**
        Extracts a value from a data object.

    **Passport**
        Credentials for authenticating a REST API call with e third party.

    **Pipe**
        Collects data from a Reservoir with the help of a Plumber.

    **Platform**
        A third-party platform with a REST API. Can take the form of a Reservoir or a Destination.

    **Plumber**
        Helps get data from a Pipe. Carries a Passport.

    **Procedure**
        An analysis used to enrich data.

    **RealName**
        A regular expression for strings that should be replaced with a CodeName.

    **Record**
        Saves an API response from an Endpoint, as well as a Stamp of the API call. Can take the form of a Dispatch or an Invoice.

    **Reservoir**
        A third-party platform with data that can be searched with Filters.

    **ReservoirQuery**
        A search request sent to a Reservoir.

    **ReservoirQueryParameters**
        Criteria for searching a Reservoir.

    **Rule**
        A logical test used to categorize data.

    **Sample**
        A Teaser for data from a Pipe.

    **SearchTerm**
        A keyword or phrase used to create a Filter.

    **Sieve**
        A ruleset composed of one or more SieveNodes. Used to test whether data meets a certain set of criteria.</p>

    **SieveNode**
        A component of a Sieve, consisting of a Rule or another Sieve.

    **Stamp**
        Records the use of Passport, including which Endpoint was accessed and whether the API call was successful.

    **Stream**
        Saves the status of a streaming API connection to a Pipe.

    **Tag**
        A keyword or phrase used to classify and filter Alerts.

    **Taste**
        A Teaser for data in a Container.

    **Teaser**
        Provides basic information about data, such as author, title, date, and location. Can take the form or a Sample or a Taste.

    **Timeframe**
        Specifies a start and/or end datetime. Can be used to construct a ReservoirQuery.

    **Topic**
        A category used to classify Tags.

    **Trigger**
        A ruleset used by a Watchdog for Alert generation.

    **Visa**
        Limits the number of times an Emissary can be used in a given time interval.

    **Warehouse**
        A storage location for data, such as an Elasticsearch index or MongoDB database.

    **Watchdog**
        An Alarm that analyzes data and generates Alerts based on a set of Triggers. Can be quieted with a Muzzle.
